name: cd

on:
  push:
    branches:
      - test # deploys to the aws test account
      # - main # deploys to the aws prod account
  repository_dispatch: # catches cross repo triggers

env: # primary configuration touchpoint
  AWS_REGION: eu-west-1 # ireland
  CFN_TEMPLATES: "core-network-stack.yml\ncollator-setup-stack.yml\ncollator-network-stack.yml\ncollator-storage-stack.yml\ncollator-core-stack.yml\ncollator-monitoring-stack.yml\n"
  COLLATOR_SERVICE_NAME: collators
  COLLATOR_IMAGE_URL: TODO
  RELAY_CHAIN_NODE_P2P_PORT: 33334
  COLLATOR_P2P_PORT: 33333
  COLLATOR_HTTP_PORT: 1833
  COLLATOR_WS_PORT: 1933
  COLLATOR_CONTAINER_CPU_UNITS: 4096
  COLLATOR_CONTAINER_MEMORY_MIB: 8192
  COLLATOR_DESIRED_COUNT: 2

jobs:
  deploy-collators:
    runs-on: ubuntu-22.04
    needs: publish-docker-image
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 2

      - name: Configure the environment according to the current branch
        run: |
          if [[ ${{ github.ref }} == *main ]]; then
            echo "ENVIRONMENT=prod" >> $GITHUB_ENV
            echo "NETWORK_STACK_NAME=prod-collator-network" >> $GITHUB_ENV
            echo "STORAGE_STACK_NAME=prod-collator-storage" >> $GITHUB_ENV
            echo "COLLATOR_STACK_NAME=prod-collator-core" >> $GITHUB_ENV
            printf \
              "[default]\naws_access_key_id=%s\naws_secret_access_key=%s\n" \
              ${{ secrets.AWS_ACCESS_KEY_ID_PROD }} \
              ${{ secrets.AWS_SECRET_ACCESS_KEY_PROD }} \
            > $HOME/.aws/credentials
          else
            echo "ENVIRONMENT=test" >> $GITHUB_ENV
            echo "NETWORK_STACK_NAME=test-collator-network" >> $GITHUB_ENV
            echo "STORAGE_STACK_NAME=test-collator-storage" >> $GITHUB_ENV
            echo "COLLATOR_STACK_NAME=test-collator-core" >> $GITHUB_ENV
            printf \
              "[default]\naws_access_key_id=%s\naws_secret_access_key=%s\n" \
              ${{ secrets.AWS_ACCESS_KEY_ID_TEST }} \
              ${{ secrets.AWS_SECRET_ACCESS_KEY_TEST }} \
            > $HOME/.aws/credentials
          fi

      - name: Detect changed files
        uses: tj-actions/changed-files@v25
        id: changed-files

      - name: Validate all CloudFormation templates
        if: contains(steps.changed-files.outputs.all_changed_files, '-stack.yml')
        run: |
          printf "${{ env.CFN_TEMPLATES }}" | while read template; do
            aws cloudformation validate-template \
              --template-body="file://$template"
          done

      - name: Deploy the collator network stack
        if: contains(steps.changed-files.outputs.all_changed_files, 'collator-network-stack.yml')
        run: |
          aws cloudformation deploy \
            --stack-name=${{ env.NETWORK_STACK_NAME }} \
            --template-file=./collator-network-stack.yml \
            --parameter-overrides \
              RelaychainNodeP2pPort=${{ env.RELAY_CHAIN_NODE_P2P_PORT }} \
              CollatorP2pPort=${{ env.COLLATOR_P2P_PORT }} \
              CollatorHttpPort=${{ env.COLLATOR_HTTP_PORT }} \
              CollatorWsPort=${{ env.COLLATOR_WS_PORT }} \
            --no-fail-on-empty-changeset

      - name: Deploy the collator storage stack
        if: contains(steps.changed-files.outputs.all_changed_files, 'collator-storage-stack.yml')
        run: |
          aws cloudformation deploy \
            --stack-name=${{ env.STORAGE_STACK_NAME }} \
            --template-file=./collator-storage-stack.yml \
            --no-fail-on-empty-changeset

      - name: Deploy the collator core stack
        if: contains(steps.changed-files.outputs.all_changed_files, 'collator-core-stack.yml')
        run: |
          aws cloudformation deploy \
            --stack-name=${{ env.COLLATOR_STACK_NAME }} \
            --template-file=./collator-core-stack.yml \
            --parameter-overrides \
              CollatorImageUrl=${{ env.COLLATOR_IMAGE_URL }} \
              ServiceName=${{ env.COLLATOR_SERVICE_NAME }} \
              SshPublicKey=${{ secrets.SSH_PUBLIC_KEY }} \
              RelaychainNodeP2pPort=${{ env.RELAYCHAIN_NODE_P2P_PORT }} \
              CollatorP2pPort=${{ env.COLLATOR_P2P_PORT }} \
              CollatorHttpPort=${{ env.COLLATOR_HTTP_PORT }} \
              CollatorWsPort=${{ env.COLLATOR_WS_PORT }} \
              ContainerCpu=${{ env.COLLATOR_CONTAINER_CPU_UNITS }} \
              DesiredCount=${{ env.COLLATOR_DESIRED_COUNT }} \
            --capabilities=CAPABILITY_IAM \
            --no-fail-on-empty-changeset